{"version":3,"file":"static/js/93.c9ca90ae.chunk.js","mappings":"qRAEMA,EAAM,mCACNC,EAAW,+BAEJC,EAAoB,WAE/B,OADiBC,EAAAA,GAAAA,IAAA,UAAaF,EAAb,uCAAoDD,GAEtE,EAEYI,EAAsB,SAAAC,GAEjC,OADiBF,EAAAA,GAAAA,IAAA,UAAaF,EAAb,kBAA+BI,EAA/B,oBAA6CL,GAE/D,EAEYM,EAAqB,SAAAC,GAIhC,OAHiBJ,EAAAA,GAAAA,IAAA,UACZF,EADY,iCACqBD,EADrB,kBACkCO,GAGpD,EAEYC,EAAqB,SAAAH,GAEhC,OADiBF,EAAAA,GAAAA,IAAA,UAAaF,EAAb,kBAA+BI,EAA/B,4BAAqDL,GAEvE,EAEYS,EAAwB,SAAAJ,GAEnC,OADiBF,EAAAA,GAAAA,IAAA,UAAaF,EAAb,kBAA+BI,EAA/B,4BAAqDL,GAEvE,C,2LCxBYU,EAAMC,EAAAA,GAAAA,IAAH,gEAEG,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAGXC,GAAOJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,mEACD,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IACF,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAGXG,GAAON,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,+CACE,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAEXK,GAAOR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,8EAEI,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,I,mBCuB1B,EArCa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,gHAIFnB,EAAAA,EAAAA,IAAmBa,GAJjB,mBAKQ,KAFVG,EAHE,EAGVI,KAAQJ,MAEDK,OALG,uBAMVC,EAAAA,GAAAA,MAAY,yDANF,0BASZL,EAAQD,GATI,kDAWZM,EAAAA,GAAAA,MAAY,yDAXA,0DAAH,qDAcbH,GACD,GAAE,CAACN,IAIJ,OACE,SAACN,EAAD,UACGS,EAAKO,KAAI,gBAJCxB,EAIEyB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAvB,OACR,UAACjB,EAAD,YACE,SAACP,EAAD,CAAKyB,KANE5B,EAMUyB,EANL,0CAAuCzB,IAMnB6B,IAAKH,EAAMI,MAAM,SACjD,SAAClB,EAAD,UAAOc,KACP,UAACd,EAAD,yBAAkBe,QAHTI,EAAAA,EAAAA,MADH,KASf,C,wDCzCM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACtC,EAAIuC,GAWvD,OAREvC,IAFFuC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["api.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '126c98610b953996e384874a869a831e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchPopularFilms = () => {\n  const response = axios.get(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n  return response;\n};\n\nexport const fetchFilmsByRequest = id => {\n  const response = axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n  return response;\n};\n\nexport const fetchMoviesByTitle = value => {\n  const response = axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${value}`\n  );\n  return response;\n};\n\nexport const fetchCastByRequest = id => {\n  const response = axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${KEY}`);\n  return response;\n};\n\nexport const fetchReviewsByRequest = id => {\n  const response = axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`);\n  return response;\n};\n","import styled from 'styled-components';\nimport {\n  BaseList,\n  BaseItem,\n  BaseText,\n} from 'components/constans/BaseStyle.styled';\nexport const Img = styled.img`\n  width: 120px;\n  margin-bottom: ${props => props.theme.spacing(4)};\n`;\n\nexport const List = styled(BaseList)`\n  margin-top: ${props => props.theme.spacing(8)};\n  margin-bottom: ${props => props.theme.spacing(8)};\n`;\n\nexport const Item = styled(BaseItem)`\n  margin-bottom: ${props => props.theme.spacing(8)};\n`;\nexport const Text = styled(BaseText)`\n  &:not(:last-child) {\n    margin-bottom: ${props => props.theme.spacing(4)};\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { fetchCastByRequest } from '../../api';\nimport { Img, Text, List, Item } from './Cast.styled';\nimport { nanoid } from 'nanoid';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchCastByRequest(movieId);\n        if (cast.length === 0) {\n          toast.error('Oops, something went wrong, be kind, change your side');\n          return;\n        }\n        setCast(cast);\n      } catch (error) {\n        toast.error('Oops, something went wrong, be kind, change your side');\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  const getSrc = value => `https://image.tmdb.org/t/p/w500/${value}`;\n\n  return (\n    <List>\n      {cast.map(({ profile_path, name, character }) => (\n        <Item key={nanoid()}>\n          <Img src={getSrc(profile_path)} alt={name} width=\"120\" />\n          <Text>{name}</Text>\n          <Text>Character: {character}</Text>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["KEY","BASE_URL","fetchPopularFilms","axios","fetchFilmsByRequest","id","fetchMoviesByTitle","value","fetchCastByRequest","fetchReviewsByRequest","Img","styled","props","theme","spacing","List","BaseList","Item","BaseItem","Text","BaseText","movieId","useParams","useState","cast","setCast","useEffect","getCast","data","length","toast","map","profile_path","name","character","src","alt","width","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}