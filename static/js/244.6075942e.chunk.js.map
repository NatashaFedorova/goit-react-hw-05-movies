{"version":3,"file":"static/js/244.6075942e.chunk.js","mappings":"sRAEMA,EAAM,mCACNC,EAAW,+BAEJC,EAAoB,WAE/B,OADiBC,EAAAA,GAAAA,IAAA,UAAaF,EAAb,uCAAoDD,GAEtE,EAEYI,EAAsB,SAAAC,GAEjC,OADiBF,EAAAA,GAAAA,IAAA,UAAaF,EAAb,kBAA+BI,EAA/B,oBAA6CL,GAE/D,EAEYM,EAAqB,SAAAC,GAIhC,OAHiBJ,EAAAA,GAAAA,IAAA,UACZF,EADY,iCACqBD,EADrB,kBACkCO,GAGpD,EAEYC,EAAqB,SAAAH,GAEhC,OADiBF,EAAAA,GAAAA,IAAA,UAAaF,EAAb,kBAA+BI,EAA/B,4BAAqDL,GAEvE,EAEYS,EAAwB,SAAAJ,GAEnC,OADiBF,EAAAA,GAAAA,IAAA,UAAaF,EAAb,kBAA+BI,EAA/B,4BAAqDL,GAEvE,C,mLCvBYU,EAAQC,EAAAA,GAAAA,GAAH,kEACC,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IACT,SAAAF,GAAK,OAAIA,EAAMC,MAAME,UAAUC,MAA1B,IAGPC,GAAON,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,sBAEJQ,GAAOR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,mEACD,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IACF,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAEXO,GAAOV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAH,8EAEI,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,IAGbS,GAAUZ,EAAAA,EAAAA,IAAOD,EAAPC,CAAH,wCACR,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQ,EAAxB,I,6BCqBjB,EAtCgB,WACd,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,gHAILvB,EAAAA,EAAAA,IAAsBe,GAJjB,mBAKQ,KAFbS,EAHK,EAGbC,KAAQD,SAEEE,OALG,uBAMbL,GAAW,GANE,0BASfF,EAAWK,GATI,kDAWfG,EAAAA,GAAAA,MAAY,yDAXG,0DAAH,qDAchBJ,GACD,GAAE,CAACR,KAGF,gCACGK,IAAW,SAACN,EAAD,wDACZ,SAACN,EAAD,UACGU,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,UAACpB,EAAD,YACE,UAACT,EAAD,sBAAgB4B,MAChB,SAACjB,EAAD,UAAOkB,OAFEC,EAAAA,EAAAA,MADA,QASpB,C,wDC1CM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACxC,EAAIyC,GAWvD,OAREzC,IAFFyC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["api.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '126c98610b953996e384874a869a831e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchPopularFilms = () => {\n  const response = axios.get(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n  return response;\n};\n\nexport const fetchFilmsByRequest = id => {\n  const response = axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n  return response;\n};\n\nexport const fetchMoviesByTitle = value => {\n  const response = axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${value}`\n  );\n  return response;\n};\n\nexport const fetchCastByRequest = id => {\n  const response = axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${KEY}`);\n  return response;\n};\n\nexport const fetchReviewsByRequest = id => {\n  const response = axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`);\n  return response;\n};\n","import styled from 'styled-components';\nimport {\n  BaseList,\n  BaseItem,\n  BaseText,\n} from '../../components/constans/BaseStyle.styled';\n\nexport const Title = styled.h3`\n  margin-bottom: ${props => props.theme.spacing(4)};\n  font-size: ${props => props.theme.fontSizes.normal};\n`;\n\nexport const List = styled(BaseList)``;\n\nexport const Item = styled(BaseItem)`\n  margin-top: ${props => props.theme.spacing(8)};\n  margin-bottom: ${props => props.theme.spacing(8)};\n`;\nexport const Text = styled(BaseText)`\n  &:not(:last-child) {\n    margin-bottom: ${props => props.theme.spacing(4)};\n  }\n`;\nexport const Message = styled(Title)`\n  margin: ${props => props.theme.spacing(4)};\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { Text, List, Item, Title, Message } from './Reviews.styled';\nimport { fetchReviewsByRequest } from '../../api';\nimport { nanoid } from 'nanoid';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [message, setMessage] = useState(false);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const {\n          data: { results },\n        } = await fetchReviewsByRequest(movieId);\n        if (results.length === 0) {\n          setMessage(true);\n          return;\n        }\n        setReviews(results);\n      } catch (error) {\n        toast.error('Oops, something went wrong, be kind, change your side');\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {message && <Message>We don't have any reviews for this movie</Message>}\n      <List>\n        {reviews.map(({ author, content }) => (\n          <Item key={nanoid()}>\n            <Title>Author: {author}</Title>\n            <Text>{content}</Text>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["KEY","BASE_URL","fetchPopularFilms","axios","fetchFilmsByRequest","id","fetchMoviesByTitle","value","fetchCastByRequest","fetchReviewsByRequest","Title","styled","props","theme","spacing","fontSizes","normal","List","BaseList","Item","BaseItem","Text","BaseText","Message","movieId","useParams","useState","reviews","setReviews","message","setMessage","useEffect","getReviews","results","data","length","toast","map","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}